class Solution {
    public int minimumSum(int num) {
        char[] chars = String.valueOf(num).toCharArray();
        divide(chars,0,chars.length-1);
        return (chars[0] - '0') * 10 + (chars[2] - '0') + (chars[1] - '0') * 10 + (chars[3] - '0');
    }
    public static void conquer(char arr[],int si,int mid,int ei) {
		
		char[] merged = new char[ei-si+1];
		int idx1 = si,idx2 = mid+1,x=0;
		
		while(idx1<=mid && idx2<=ei) {
			if(arr[idx1]<=arr[idx2]) {
				merged[x++] = arr[idx1++];
			}
			else {
				merged[x++] = arr[idx2++];
			}
		}
		while(idx1<=mid) {
			merged[x++] = arr[idx1++];
		}
		
		while(idx2<=ei) {
			merged[x++] = arr[idx2++];
		}	
		
		for(int i=0,j=si;i<merged.length;i++,j++) {
			arr[j] = merged[i];
		}
	}
	public static void divide(char arr[],int si,int ei){
		if(si>=ei) {
			return;
		}
		int mid = si+(ei-si)/2;
		divide(arr,si,mid);
		divide(arr,mid+1,ei);
		conquer(arr,si,mid,ei);
		
	}
}